import telegram
import re
import time
import random
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ChatAction
from telegram.ext import ConversationHandler

class CommandHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    def __init__(self, ui_manager, api_client, message_manager, content_service, logger, config):
        self.ui_manager = ui_manager
        self.api_client = api_client
        self.message_manager = message_manager
        self.content_service = content_service
        self.logger = logger
        self.config = config

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from src.test_service import TestService
        from src.topic_service import TopicService
        self.test_service = TestService(api_client, logger)
        self.topic_service = TopicService(api_client, logger)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ config
        from src.config import TOPIC, CHOOSE_TOPIC, TEST, ANSWER, CONVERSATION
        self.TOPIC = TOPIC
        self.CHOOSE_TOPIC = CHOOSE_TOPIC
        self.TEST = TEST
        self.ANSWER = ANSWER
        self.CONVERSATION = CONVERSATION

        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        self.callback_cache = {}
        self.callback_cache_ttl = 2  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ (—Å–µ–∫—É–Ω–¥—ã)

    def start(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user = update.message.from_user
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        chat_id = update.effective_chat.id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = update.message.reply_text(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "üèõÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏!*\n\n"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\n"
            "üìö *–ò–∑—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã* ‚Äî –æ—Ç –î—Ä–µ–≤–Ω–µ–π –†—É—Å–∏ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –†–æ—Å—Å–∏–∏\n"
            "‚úÖ *–ü—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã* –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è\n"
            "üó£Ô∏è *–í–µ—Å—Ç–∏ –±–µ—Å–µ–¥—ã* –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n"
            "üó∫Ô∏è *–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É* –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"
            "üîç *–í—ã–±–∏—Ä–∞—Ç—å —Ç–µ–º—ã* –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏\n\n"
            "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 5 –≥–ª–∞–≤–∞—Ö, –≤–∫–ª—é—á–∞—é—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ–∫–∞—Ö, –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.\n\n"
            "‚ùó *–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.*",
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_manager.save_message_id(update, context, sent_message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        sent_msg = update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=self.ui_manager.main_menu()
        )
        self.message_manager.save_message_id(update, context, sent_msg.message_id)
        return self.TOPIC

    def button_handler(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.
        –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        query = update.callback_query
        try:
            query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        except telegram.error.BadRequest as e:
            if "query is too old" in str(e).lower():
                # –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
                self.logger.info(f"–°—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            else:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")

        user_id = query.from_user.id
        query_data = query.data

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        import time
        current_time = time.time()
        cache_key = (user_id, query_data)

        if cache_key in self.callback_cache:
            last_time = self.callback_cache[cache_key]
            # –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ TTL —Å–µ–∫—É–Ω–¥
            if current_time - last_time < self.callback_cache_ttl:
                self.logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ {query_data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        self.callback_cache[cache_key] = current_time

        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤)
        if len(self.callback_cache) > 100:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ TTL
            old_keys = [k for k, v in self.callback_cache.items() if current_time - v > self.callback_cache_ttl]
            for k in old_keys:
                del self.callback_cache[k]

        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query_data}")

        if query_data == 'back_to_menu':
            query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC
        elif query_data == 'project_info':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open('static/presentation.txt', 'r', encoding='utf-8') as file:
                    presentation_text = file.read()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ presentation.txt: {e}")
                presentation_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤)
            max_length = 3000
            parts = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            current_part = "üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ*\n\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            paragraphs = presentation_text.split('\n\n')

            for paragraph in paragraphs:
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                if len(current_part) + len(paragraph) + 2 > max_length:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                    parts.append(current_part)
                    current_part = paragraph
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                    if current_part and current_part != "üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ*\n\n":
                        current_part += '\n\n' + paragraph
                    else:
                        current_part += paragraph

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part)

            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = [
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                ]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                query.edit_message_text(
                    parts[0][:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for i, part in enumerate(parts[1:], 1):
                    sent_msg = query.message.reply_text(
                        part[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard) if i == len(parts[1:]) else None
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.message_manager.save_message_id(update, context, sent_msg.message_id)

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞—Ä–∞–Ω–µ–µ
                import sys
                sys.path.append('.')
                from create_presentation_doc import create_presentation_docx

                # –°–æ–∑–¥–∞–µ–º Word –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                docx_path = '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx'
                if not os.path.exists(docx_path):
                    docx_path = create_presentation_docx('detailed_presentation.md', docx_path)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                download_message = "üì• *–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é:*\n\n"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Replit Object Storage –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
                try:
                    from replit.object_storage import Client
                    obj_storage_available = True
                    self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Object Storage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π")
                    storage_client = Client()
                except ImportError:
                    obj_storage_available = False
                    self.logger.warning("Replit Object Storage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
                except Exception as storage_init_error:
                    obj_storage_available = False
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Object Storage: {storage_init_error}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ Object Storage (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                docx_in_storage = False
                if obj_storage_available:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ Object Storage
                        docx_in_storage = storage_client.exists('–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx')
                        self.logger.info(f"–§–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ Object Storage: {docx_in_storage}")
                    except Exception as storage_check_error:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Object Storage: {storage_check_error}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ Object Storage, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    if obj_storage_available and docx_in_storage:
                        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ Object Storage")
                        try:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Object Storage –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
                            from io import BytesIO
                            file_buffer = BytesIO()
                            storage_client.download_to_file('–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx', file_buffer)
                            file_buffer.seek(0)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                            if file_buffer.getbuffer().nbytes > 0:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
                                file_buffer.name = '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx'
                                sent_doc = context.bot.send_document(
                                    chat_id=update.effective_chat.id,
                                    document=file_buffer,
                                    filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx',
                                    caption="üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word.",
                                    timeout=60
                                )
                                self.message_manager.save_message_id(update, context, sent_doc.message_id)
                                self.logger.info("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ Object Storage")

                            else:
                                raise ValueError("–§–∞–π–ª –∏–∑ Object Storage –ø—É—Å—Ç")

                        except Exception as storage_send_error:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑ Object Storage: {storage_send_error}")
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ—Ç–æ–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ Object Storage")

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ Object Storage, –ø—Ä–æ–±—É–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    if os.path.exists(docx_path) and os.path.getsize(docx_path) > 0:
                        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                        with open(docx_path, 'rb') as docx_file:
                            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                            file_content = docx_file.read()

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                            if len(file_content) > 0:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –ø–∞–º—è—Ç–∏
                                from io import BytesIO
                                file_obj = BytesIO(file_content)
                                file_obj.name = '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx'

                                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                                sent_doc = context.bot.send_document(
                                    chat_id=update.effective_chat.id,
                                    document=file_obj,
                                    filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx',
                                    caption="üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word.",
                                    timeout=60  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                                )
                                self.message_manager.save_message_id(update, context, sent_doc.message_id)
                                self.logger.info("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Object Storage –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                                if obj_storage_available and not docx_in_storage:
                                    try:
                                        with open(docx_path, 'rb') as f:
                                            storage_client.upload_from_file('–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx', f)
                                        self.logger.info("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Object Storage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                                    except Exception as backup_error:
                                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ Object Storage: {backup_error}")
                            else:
                                raise ValueError("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø—É—Å—Ç")
                    else:
                        raise ValueError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç: {docx_path}")

                except Exception as docx_err:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DOCX —Ñ–∞–π–ª–∞: {docx_err}")

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                    try:
                        self.logger.info("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
                        from create_presentation_doc import create_presentation_docx
                        new_docx_path = create_presentation_docx('detailed_presentation.md', '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–Ω–æ–≤–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx')

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Object Storage, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                        if obj_storage_available:
                            try:
                                with open(new_docx_path, 'rb') as f:
                                    storage_client.upload_from_file('–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx', f)
                                self.logger.info("–ù–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Object Storage")
                            except Exception as storage_err:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ Object Storage: {storage_err}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
                        with open(new_docx_path, 'rb') as new_docx_file:
                            sent_doc = context.bot.send_document(
                                chat_id=update.effective_chat.id,
                                document=new_docx_file,
                                filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx',
                                caption="üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word.",
                                timeout=60  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                            )
                            self.message_manager.save_message_id(update, context, sent_doc.message_id)
                            self.logger.info("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

                    except Exception as retry_err:
                        self.logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DOCX: {retry_err}")
                        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω—é
                        query.message.reply_text(
                            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                        )

                # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                try:
                    md_path = 'detailed_presentation.md'
                    md_in_storage = False

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MD-—Ñ–∞–π–ª–∞ –≤ Object Storage
                    if obj_storage_available:
                        try:
                            md_in_storage = storage_client.exists(md_path)
                            self.logger.info(f"MD-—Ñ–∞–π–ª –≤ Object Storage: {md_in_storage}")
                        except Exception as md_check_error:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MD-—Ñ–∞–π–ª–∞ –≤ Object Storage: {md_check_error}")

                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ Object Storage –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    if obj_storage_available and md_in_storage:
                        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ MD-—Ñ–∞–π–ª–∞ –∏–∑ Object Storage")
                        try:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Object Storage –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
                            from io import BytesIO
                            md_buffer = BytesIO()
                            storage_client.download_to_file(md_path, md_buffer)
                            md_buffer.seek(0)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                            if md_buffer.getbuffer().nbytes > 0:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
                                md_buffer.name = '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.md'
                                sent_md = context.bot.send_document(
                                    chat_id=update.effective_chat.id,
                                    document=md_buffer,
                                    filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.md',
                                    caption="üìÑ –í–µ—Ä—Å–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Markdown.",
                                    timeout=30
                                )
                                self.message_manager.save_message_id(update, context, sent_md.message_id)
                                self.logger.info("MD-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ Object Storage")
                            else:
                                raise ValueError("MD-—Ñ–∞–π–ª –∏–∑ Object Storage –ø—É—Å—Ç")

                        except Exception as md_storage_send_error:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ MD-—Ñ–∞–π–ª–∞ –∏–∑ Object Storage: {md_storage_send_error}")
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ—Ç–æ–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å MD-—Ñ–∞–π–ª –∏–∑ Object Storage")

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ Object Storage, –ø—Ä–æ–±—É–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    if os.path.exists(md_path) and os.path.getsize(md_path) > 0:
                        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ MD-—Ñ–∞–π–ª–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                        with open(md_path, 'rb') as md_file:
                            sent_md = context.bot.send_document(
                                chat_id=update.effective_chat.id,
                                document=md_file,
                                filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.md',
                                caption="üìÑ –í–µ—Ä—Å–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Markdown.",
                                timeout=30
                            )
                            self.message_manager.save_message_id(update, context, sent_md.message_id)

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Object Storage –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                            if obj_storage_available and not md_in_storage:
                                try:
                                    with open(md_path, 'rb') as f:
                                        storage_client.upload_from_file(md_path, f)
                                    self.logger.info("MD-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Object Storage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                                except Exception as md_backup_error:
                                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å MD-—Ñ–∞–π–ª –≤ Object Storage: {md_backup_error}")
                    else:
                        raise ValueError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π MD-—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç: {md_path}")

                except Exception as md_err:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ MD —Ñ–∞–π–ª–∞: {md_err}")
                    query.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                    )

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –ø–æ–ª—É—á–∏–ª —Ñ–∞–π–ª—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
            except telegram.error.BadRequest as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                for i, part in enumerate(parts):
                    keyboard = [
                        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                    ]
                    sent_msg = query.message.reply_text(
                        part[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard) if i == len(parts) - 1 else None
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.message_manager.save_message_id(update, context, sent_msg.message_id)

                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
                try:
                    # –°–æ–∑–¥–∞–µ–º Word –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    docx_path = '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx'
                    if not os.path.exists(docx_path):
                        from create_presentation_doc import create_presentation_docx
                        docx_path = create_presentation_docx('detailed_presentation.md', docx_path)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    with open(docx_path, 'rb') as docx_file:
                        sent_doc = context.bot.send_document(
                            chat_id=update.effective_chat.id,
                            document=docx_file,
                            filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx',
                            caption="üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word."
                        )
                        self.message_manager.save_message_id(update, context, sent_doc.message_id)

                    # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    with open('detailed_presentation.md', 'rb') as md_file:
                        sent_md = context.bot.send_document(
                            chat_id=update.effective_chat.id,
                            document=md_file,
                            filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.md',
                            caption="üìÑ –í–µ—Ä—Å–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Markdown."
                        )
                        self.message_manager.save_message_id(update, context, sent_md.message_id)
                except Exception as file_err:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {file_err}")
                    sent_err = query.message.reply_text(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                    )
                    self.message_manager.save_message_id(update, context, sent_err.message_id)

            return self.TOPIC
        elif query_data == 'conversation':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–µ—Å–µ–¥—ã –æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏
            query.edit_message_text(
                "üó£Ô∏è *–ë–µ—Å–µ–¥–∞ –æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π –†–æ—Å—Å–∏–∏.\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode='Markdown'
            )
            return self.CONVERSATION
        elif query_data == 'topic':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–º
            try:
                try:
                    query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º: {e}")
                    query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                filtered_topics = self.topic_service.generate_topics_list()
                context.user_data['topics'] = filtered_topics

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
                reply_markup = self.ui_manager.create_topics_keyboard(filtered_topics)

                try:
                    query.edit_message_text(
                        "üìö *–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º: {e}")
                    query.message.reply_text(
                        "üìö *–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
            except Exception as e:
                self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=self.ui_manager.main_menu()
                )
            return self.CHOOSE_TOPIC
        elif query_data == 'test':
            topic = context.user_data.get('current_topic', None)
            if not topic:
                query.edit_message_text(
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É'.",
                    reply_markup=self.ui_manager.main_menu()
                )
                return self.TOPIC

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            query.edit_message_text(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: *{topic}*...\n\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode='Markdown')
            self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ '{topic}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏, –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã
                context.bot.send_chat_action(chat_id=update.effective_chat.id, action=telegram.ChatAction.TYPING)

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                test_data = self.test_service.generate_test(topic)

                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ—Å—Ç–∞
                valid_questions = test_data.get('original_questions', [])
                display_questions = test_data.get('display_questions', [])

                if not valid_questions:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['questions'] = valid_questions
                context.user_data['current_question'] = 0
                context.user_data['score'] = 0
                context.user_data['total_questions'] = len(valid_questions)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
                context.user_data['original_questions'] = valid_questions
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                context.user_data['display_questions'] = display_questions

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data='end_test')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
                query.edit_message_text(
                    f"üìù –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {topic}\n\n–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–∑ {len(valid_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤! –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ. –í–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                if len(display_questions) > 0:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    question_text = display_questions[0]

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é TestService
                    formatted_question = self.test_service.format_question_text(question_text)
                    main_question_text = formatted_question['main_question']
                    options_text = "\n".join(formatted_question['options'])

                    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    formatted_text = f"{main_question_text}\n\n{options_text}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
                    query.message.reply_text(f"üß† –í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(display_questions)}:")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                    query.message.reply_text(formatted_text)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    query.message.reply_text(
                        "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3 –∏–ª–∏ 4).", 
                        reply_markup=reply_markup
                    )
                    self.logger.info(f"–¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ '{topic}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞")

            except Exception as e:
                self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=self.ui_manager.main_menu()
                )
            return self.ANSWER
        elif query_data == 'more_topics':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–º
            try:
                query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                filtered_topics = self.topic_service.generate_new_topics_list()
                context.user_data['topics'] = filtered_topics

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
                reply_markup = self.ui_manager.create_topics_keyboard(filtered_topics)

                query.edit_message_text(
                    "üìö *–ù–æ–≤—ã–µ —Ç–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
            except Exception as e:
                self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=self.ui_manager.main_menu()
                )
            return self.CHOOSE_TOPIC
        elif query_data == 'clear_chat_retry':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞ —á–µ—Ä–µ–∑ callback (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
            query.answer("–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.edit_message_text(
                "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏.",
                reply_markup=reply_markup
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            sent_msg = query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                reply_markup=self.ui_manager.main_menu()
            )
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            return self.TOPIC

        elif query_data == 'admin_clear_all_chats' and hasattr(self, 'admin_panel'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if self.admin_panel.is_admin(user_id):
                query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º")
                query.edit_message_text(
                    "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                )
                return self.TOPIC
            else:
                query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return self.TOPIC

        elif query_data == 'cancel' or query_data == 'end_test':
            if query_data == 'end_test':
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç")
                query.edit_message_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.ui_manager.main_menu())
                return self.TOPIC
            else:
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
                query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
        elif query_data == 'custom_topic':
            query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:")
            return self.CHOOSE_TOPIC
        elif query_data == 'history_map':
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            import sys
            sys.path.append('webapp')
            from bot_integration import get_webapp_keyboard, get_map_description
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            description = get_map_description()
            keyboard = get_webapp_keyboard()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            query.edit_message_text(
                description,
                parse_mode='Markdown',
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            context.bot.send_chat_action(chat_id=update.effective_chat.id, action=telegram.ChatAction.TYPING)
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return self.TOPIC

    def choose_topic(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ —Å–≤–æ–µ–π —Ç–µ–º—ã.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.callback_query:
            query = update.callback_query
            query.answer()
            user_id = query.from_user.id

            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {query.data}")

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ë–æ–ª—å—à–µ —Ç–µ–º"
            if query.data == 'more_topics':
                return self.button_handler(update, context)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–≤–æ—è —Ç–µ–º–∞"
            elif query.data == 'custom_topic':
                query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:")
                return self.CHOOSE_TOPIC

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            elif query.data == 'back_to_menu':
                return self.button_handler(update, context)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞
            elif query.data.startswith('topic_'):
                try:
                    topic_index = int(query.data.split('_')[1]) - 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
                    if 0 <= topic_index < len(context.user_data['topics']):
                        topic = context.user_data['topics'][topic_index]
                        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if '. ' in topic:
                            topic = topic.split('. ', 1)[1]

                        context.user_data['current_topic'] = topic
                        query.edit_message_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')
                        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–µ–º—É: {topic}")

                        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
                        def update_message(message):
                            try:
                                query.edit_message_text(message, parse_mode='Markdown')
                            except Exception as e:
                                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
                                query.message.reply_text(message, parse_mode='Markdown')

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ç–µ–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
                        messages = self.topic_service.get_topic_info(topic, update_message)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                        if isinstance(messages, list) and messages:
                            try:
                                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                                query.edit_message_text(
                                    messages[0],
                                    parse_mode='Markdown',
                                    disable_web_page_preview=True
                                )

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≥–ª–∞–≤—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                import time
                                for i, msg in enumerate(messages[1:], 1):
                                    try:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                        if len(msg) > 4000:
                                            # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º –≥–ª–∞–≤—ã
                                            header_match = re.match(r'^(.+?–ì–õ–ê–í–ê \d+:.+?\*)\n\n(‚îà+)\n\n', msg)
                                            if header_match:
                                                header = header_match.group(1) + "\n\n" + header_match.group(2) + "\n\n"
                                                content = msg[len(header):]

                                                # –ò—â–µ–º —Ñ—É—Ç–µ—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                                                footer_match = re.search(r'\n\n(‚Ä¢‚îà+‚Ä¢)\n\n(‚û°Ô∏è.+|üìù.+)$', msg)
                                                footer = ""
                                                if footer_match:
                                                    footer = "\n\n" + footer_match.group(1) + "\n\n" + footer_match.group(2)
                                                    content = content[:-(len(footer))]

                                                # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤ (—Å –∑–∞–ø–∞—Å–æ–º)
                                                chunks = []
                                                current_length = 0
                                                current_chunk = ""

                                                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
                                                paragraphs = content.split('\n\n')
                                                for paragraph in paragraphs:
                                                    if current_length + len(paragraph) + 4 <= 3500:
                                                        if current_chunk:
                                                            current_chunk += "\n\n" + paragraph
                                                        else:
                                                            current_chunk = paragraph
                                                        current_length += len(paragraph) + 4
                                                    else:
                                                        chunks.append(current_chunk)
                                                        current_chunk = paragraph
                                                        current_length = len(paragraph)

                                                if current_chunk:
                                                    chunks.append(current_chunk)

                                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–π –≥–ª–∞–≤—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                                chapter_match = re.search(r'–ì–õ–ê–í–ê (\d+):', header)
                                                chapter_num = int(chapter_match.group(1)) if chapter_match else i

                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                                                for j, chunk in enumerate(chunks, 1):
                                                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
                                                    part_header = header.replace("*\n\n", f"* (—á–∞—Å—Ç—å {j}/{len(chunks)})\n\n")

                                                    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
                                                    if j == len(chunks):
                                                        full_msg = part_header + chunk + footer
                                                    else:
                                                        full_msg = part_header + chunk + "\n\n_(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...)_"

                                                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                                                    if i > 1 or j > 1:
                                                        time.sleep(0.5)

                                                    sent_msg = query.message.reply_text(
                                                        full_msg, 
                                                        parse_mode='Markdown',
                                                        disable_web_page_preview=True
                                                    )
                                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                                                    self.message_manager.save_message_id(update, context, sent_msg.message_id)
                                            else:
                                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
                                                chunks = [msg[i:i+4000] for i in range(0, len(msg), 4000)]
                                                for chunk in chunks:
                                                    sent_msg = query.message.reply_text(
                                                        chunk, 
                                                        parse_mode='Markdown',
                                                        disable_web_page_preview=True
                                                    )
                                                    self.message_manager.save_message_id(update, context, sent_msg.message_id)
                                                    time.sleep(0.5)
                                        else:
                                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                                            if i > 1:
                                                time.sleep(0.5)

                                            sent_msg = query.message.reply_text(
                                                msg, 
                                                parse_mode='Markdown',
                                                disable_web_page_preview=True
                                            )
                                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                                            self.message_manager.save_message_id(update, context, sent_msg.message_id)
                                    except telegram.error.RetryAfter as e:
                                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                                        self.logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫—É–Ω–¥")
                                        time.sleep(e.retry_after)
                                        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                        sent_msg = query.message.reply_text(
                                            msg, 
                                            parse_mode='Markdown',
                                            disable_web_page_preview=True
                                        )
                                        self.message_manager.save_message_id(update, context, sent_msg.message_id)
                                    except Exception as e:
                                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                        try:
                                            sent_msg = query.message.reply_text(
                                                msg, 
                                                parse_mode=None,
                                                disable_web_page_preview=True
                                            )
                                            self.message_manager.save_message_id(update, context, sent_msg.message_id)
                                        except Exception as e2:
                                            self.logger.error(f"–í—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

                                self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(messages) + sum(1 for m in messages[1:] if len(m) > 4000)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ '{topic}'")
                            except Exception as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                                query.edit_message_text(
                                    f"üìö –¢–µ–º–∞: {topic}\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ:",
                                    parse_mode=None
                                )

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                for msg in messages:
                                    try:
                                        query.message.reply_text(msg[:4000], parse_mode=None)
                                        if len(msg) > 4000:
                                            for i in range(4000, len(msg), 4000):
                                                query.message.reply_text(msg[i:i+4000], parse_mode=None)
                                                time.sleep(0.5)
                                    except Exception as e_msg:
                                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e_msg}")
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ messages –Ω–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ–π
                            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º—ã: {topic}")
                            query.edit_message_text(
                                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ *{topic}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                                parse_mode='Markdown'
                            )

                        query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.ui_manager.main_menu())
                        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic}")
                    else:
                        self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É —Å –∏–Ω–¥–µ–∫—Å–æ–º {topic_index+1}")
                        query.edit_message_text(
                            f"–û—à–∏–±–∫–∞: –¢–µ–º–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {topic_index+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.", 
                            reply_markup=self.ui_manager.main_menu()
                        )
                except Exception as e:
                    self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    query.edit_message_text(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                        reply_markup=self.ui_manager.main_menu()
                    )
                return self.TOPIC
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º CHOOSE_TOPIC, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        return self.CHOOSE_TOPIC

    def handle_custom_topic(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–≤–æ–µ–π —Ç–µ–º—ã.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        topic = update.message.text
        user_id = update.message.from_user.id
        context.user_data['current_topic'] = topic

        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–≤–æ—é —Ç–µ–º—É: {topic}")

        try:
            update.message.reply_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
            def update_message(message):
                update.message.reply_text(message, parse_mode='Markdown')

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ç–µ–º (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
            messages = self.topic_service.get_topic_info(topic, update_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            if isinstance(messages, list) and messages:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–µ
                    update.message.reply_text(
                        messages[0],
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≥–ª–∞–≤—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    import time
                    for i, msg in enumerate(messages[1:], 1):
                        try:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                            if i > 1 and i % 3 == 0:  # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ 3-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                time.sleep(0.5)

                            sent_msg = update.message.reply_text(
                                msg, 
                                parse_mode='Markdown',
                                disable_web_page_preview=True
                            )
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                            self.message_manager.save_message_id(update, context, sent_msg.message_id)
                        except telegram.error.RetryAfter as e:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                            self.logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫—É–Ω–¥")
                            time.sleep(e.retry_after)
                            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            sent_msg = update.message.reply_text(
                                msg, 
                                parse_mode='Markdown',
                                disable_web_page_preview=True
                            )
                            self.message_manager.save_message_id(update, context, sent_msg.message_id)
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                    self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ '{topic}'")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                    update.message.reply_text(
                        f"üìö –¢–µ–º–∞: {topic}\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ:"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
                    for msg in messages:
                        update.message.reply_text(msg, parse_mode=None)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ messages –Ω–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ–π
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º—ã: {topic}")
                update.message.reply_text(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ *{topic}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                    parse_mode='Markdown'
                )

            update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.ui_manager.main_menu())
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic}")
        except Exception as e:
            self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=self.ui_manager.main_menu())
        return self.TOPIC

    def handle_answer(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user_answer = update.message.text.strip()
        user_id = update.message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        questions = context.user_data.get('questions', [])
        current_question = context.user_data.get('current_question', 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        if not questions or current_question >= len(questions):
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            update.message.reply_text(
                "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        original_questions = context.user_data.get('original_questions', questions)
        display_questions = context.user_data.get('display_questions', questions)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if not user_answer.isdigit() or int(user_answer) < 1 or int(user_answer) > 4:
            sent_msg = update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 1 –¥–æ 4).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            return self.ANSWER

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        try:
            correct_answer = self.test_service.parse_correct_answer(original_questions[current_question])

            if not correct_answer:
                raise ValueError("–§–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if int(correct_answer) < 1 or int(correct_answer) > 4:
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {correct_answer} –≤ –≤–æ–ø—Ä–æ—Å–µ {current_question+1}")
                correct_answer = "1"  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        except (IndexError, ValueError) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question+1}: {e}")
            update.message.reply_text(
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.", 
                reply_markup=self.ui_manager.main_menu()
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –±–µ–∑ —É—á–µ—Ç–∞ —ç—Ç–æ–≥–æ
            context.user_data['current_question'] = current_question + 1

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            if context.user_data['current_question'] < len(display_questions):
                return self._show_next_question(update, context, display_questions)
            else:
                return self._show_test_results(update, context, questions)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_correct = user_answer == correct_answer
        if is_correct:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            context.user_data['score'] = context.user_data.get('score', 0) + 1
            sent_msg = update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question+1}")
        else:
            sent_msg = update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question+1}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        context.user_data['current_question'] = current_question + 1

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        if context.user_data['current_question'] < len(display_questions):
            return self._show_next_question(update, context, display_questions)
        else:
            return self._show_test_results(update, context, questions)

    def _show_next_question(self, update, context, display_questions):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            display_questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            current_question = context.user_data.get('current_question', 0)
            total_questions = len(display_questions)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            question_text = display_questions[current_question]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é TestService
            formatted_question = self.test_service.format_question_text(question_text)
            main_question_text = formatted_question['main_question']
            options_text = "\n".join(formatted_question['options'])

            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            formatted_text = f"{main_question_text}\n\n{options_text}"

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            completion_percent = int((current_question / total_questions) * 100)
            progress_bar = "‚ñì" * (completion_percent // 5) + "‚ñë" * (20 - (completion_percent // 5))

            # 1. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ç–µ—Å—Ç–∞
            progress_text = (f"üß† –í–æ–ø—Ä–æ—Å {current_question+1} –∏–∑ {total_questions}\n"
                            f"{progress_bar} {completion_percent}%\n"
                            f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–æ: {context.user_data.get('score', 0)} –∏–∑ {current_question}")
            sent_msg1 = update.message.reply_text(progress_text)
            self.message_manager.save_message_id(update, context, sent_msg1.message_id)

            # 2. –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
            sent_msg2 = update.message.reply_text(main_question_text)
            self.message_manager.save_message_id(update, context, sent_msg2.message_id)

            # 3. –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            sent_msg3 = update.message.reply_text(options_text)
            self.message_manager.save_message_id(update, context, sent_msg3.message_id)


            # 4. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data='end_test')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            sent_msg4 = update.message.reply_text(
                "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3 –∏–ª–∏ 4).", 
                reply_markup=reply_markup
            )
            self.message_manager.save_message_id(update, context, sent_msg4.message_id)

            return self.ANSWER

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.", 
                reply_markup=self.ui_manager.main_menu()
            )
            return self._show_test_results(update, context, display_questions)

    def _show_test_results(self, update, context, questions):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            user_id = update.message.from_user.id
            score = context.user_data.get('score', 0)
            total_questions = len(questions)

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            if total_questions > 0:
                percentage = (score / total_questions) * 100
            else:
                percentage = 0

            topic = context.user_data.get('current_topic', '–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ')

            # –û—Ü–µ–Ω–∫–∞ —É—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è 20 –≤–æ–ø—Ä–æ—Å–æ–≤
            if percentage >= 90:
                assessment = "üèÜ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª."
                grade = "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ"
            elif percentage >= 80:
                assessment = "ü•á –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ! –¢—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—à—å —ç—Ç—É —Ç–µ–º—É."
                grade = "–û—Ç–ª–∏—á–Ω–æ"
            elif percentage >= 70:
                assessment = "üëç –•–æ—Ä–æ—à–æ! –¢—ã –Ω–µ–ø–ª–æ—Ö–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
                grade = "–•–æ—Ä–æ—à–æ" 
            elif percentage >= 60:
                assessment = "üéì –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –û—Å–Ω–æ–≤—ã —Ç–µ–º—ã –æ—Å–≤–æ–µ–Ω—ã, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–≥–ª—É–±–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π."
                grade = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
            elif percentage >= 50:
                assessment = "üëå –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
                grade = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
            elif percentage >= 40:
                assessment = "üìñ –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
                grade = "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
            else:
                assessment = "üìö –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ."
                grade = "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π –ø–æ 20-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
            if total_questions == 20:
                if score >= 18:  # 90-100%
                    level = "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
                elif score >= 16:  # 80-89%
                    level = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å"
                elif score >= 14:  # 70-79%
                    level = "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å"
                elif score >= 12:  # 60-69%
                    level = "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"
                elif score >= 10:  # 50-59%
                    level = "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
                else:  # < 50%
                    level = "–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"

                # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∫ –æ—Ü–µ–Ω–∫–µ
                assessment = f"{assessment}\n\n–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: *{level}*"

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–º
            similar_topics = self.recommend_similar_topics(topic, context)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_message = f"üéØ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ '*{topic}*' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            result_message += f"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({percentage:.1f}%).\n\n"
            result_message += f"*–û—Ü–µ–Ω–∫–∞:* {grade}\n\n"
            result_message += f"{assessment}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if similar_topics:
                result_message += "üìö *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:*\n"
                for i, rec_topic in enumerate(similar_topics, 1):
                    result_message += f"{i}. {rec_topic}\n"
                result_message += "\n"

            result_message += "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            update.message.reply_text(
                result_message,
                parse_mode='Markdown',
                reply_markup=self.ui_manager.main_menu()
            )

            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score}/{total_questions} ({percentage:.1f}%)")

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            context.user_data.pop('questions', None)
            context.user_data.pop('current_question', None)
            context.user_data.pop('score', None)
            context.user_data.pop('original_questions', None)
            context.user_data.pop('display_questions', None)

            return self.TOPIC

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}")
            update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC

    def _sanitize_markdown(self, text):
        """
        Sanitizes text to prevent Markdown parsing errors.

        Args:
            text (str): The text to sanitize

        Returns:
            str: Sanitized text
        """
        if not text:
            return ""

        # Replace problematic characters that could break Markdown parsing
        replacements = {
            '*': '\\*',
            '_': '\\_',
            '`': '\\`',
            '[': '\\[',
            ']': '\\]',
            '(': '\\(',
            ')': '\\)',
            '#': '\\#',
            '>': '\\>',
            '+': '\\+',
            '-': '\\-',
            '=': '\\=',
            '|': '\\|',
            '{': '\\{',
            '}': '\\}',
            '.': '\\.',
            '!': '\\!'
        }

        sanitized_text = ""
        # Process one character at a time for better control
        for char in text:
            if char in replacements:
                sanitized_text += replacements[char]
            else:
                sanitized_text += char

        return sanitized_text

    # –ú–µ—Ç–æ–¥ _normalize_russian_input –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ ConversationService

    def handle_conversation(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–µ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not update or not update.effective_user:
            self.logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return self.CONVERSATION

        user_id = update.effective_user.id
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–µ–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if hasattr(self, 'admin_panel') and context.user_data.get('waiting_for_admin_id', False):
            self.admin_panel.process_new_admin_id(update, context)
            return self.CONVERSATION

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ConversationService –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            from src.conversation_service import ConversationService

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not hasattr(self, 'conversation_service'):
                self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConversationService")
                self.conversation_service = ConversationService(
                    api_client=self.api_client, 
                    logger=self.logger
                )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.logger.debug(f"–ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ConversationService –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self.conversation_service.handle_conversation(update, context, self.message_manager)

            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–µ–¥—ã
            return self.CONVERSATION

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ—Å–µ–¥—ã: {str(e)}")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
                error_msg = update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                )
                self.message_manager.save_message_id(update, context, error_msg.message_id)
            except Exception as reply_error:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")

            return self.CONVERSATION

    def recommend_similar_topics(self, current_topic, context):
        """
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã.

        Args:
            current_topic (str): –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        return self.test_service.recommend_similar_topics(current_topic, self.api_client)

    def map_command(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /map –∏–ª–∏ /–∫–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            user_id = update.message.from_user.id
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            import sys
            sys.path.append('webapp')
            from bot_integration import get_webapp_keyboard, get_map_description
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            description = get_map_description()
            keyboard = get_webapp_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            sent_msg = update.message.reply_text(
                description,
                parse_mode='Markdown',
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            context.bot.send_chat_action(chat_id=update.effective_chat.id, action=telegram.ChatAction.TYPING)
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ä—Ç–µ")
            return self.TOPIC
        except Exception as e:
            self.logger.log_error(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç—ã")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC

    def admin_command(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–¥—É–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if hasattr(self, 'admin_panel'):
            self.admin_panel.handle_admin_command(update, context)
        else:
            update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    def neadmin_command(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /neadmin –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∞–¥—Ä–µ—Å neadmika.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        admin_panel_url = "http://t.me/teach_hisbot/neadmika"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard = [[InlineKeyboardButton("üîß –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", url=admin_panel_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "üîê *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /neadmin")

    def clear_chat_command(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clear –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞.
        –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user = update.message.from_user

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
        update.message.reply_text("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏.")

    def admin_callback(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        query = update.callback_query

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if hasattr(self, 'admin_panel'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å admin_
            if query.data.startswith('admin_'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç
                if query.data.startswith('admin_delete_'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    admin_id = int(query.data.split('_')[2])
                    self.admin_panel.handle_delete_admin_callback(update, context, admin_id)
                else:
                    # –û–±—ã—á–Ω—ã–π admin callback
                    self.admin_panel.handle_admin_callback(update, context)
                return True
        return False

    def error_handler(self, update, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ –∂—É—Ä–Ω–∞–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        self.ERROR_DESCRIPTIONS = {
            'BadRequest': '–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            'Unauthorized': '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.',
            'TimedOut': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            'NetworkError': '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.',
            'ChatMigrated': '–ß–∞—Ç –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä.',
            'TelegramError': '–û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram API.',
            'AttributeError': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç—É –æ–±—ä–µ–∫—Ç–∞.',
            'TypeError': '–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.',
            'ValueError': '–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.',
            'KeyError': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–ª—é—á—É.',
            'IndexError': '–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å–ø–∏—Å–∫–∞.'
        }

        error = context.error
        error_type = type(error).__name__

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        user_info = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id}" if update and update.effective_user else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        additional_info = f"–û—à–∏–±–∫–∞ –¥–ª—è {user_info} –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {update}" if update else "–û—à–∏–±–∫–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"

        self.logger.log_error(error, additional_info)

        if update and update.effective_message:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if error_type in self.ERROR_DESCRIPTIONS:
                error_message += f"\n{self.ERROR_DESCRIPTIONS[error_type]}"

            update.effective_message.reply_text(
                error_message,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
            )