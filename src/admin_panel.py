
import os
import json
import logging
import time
import threading
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ContextTypes
import datetime
import sys
import signal
import psutil

class AdminPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –±–æ—Ç–∞"""

    def __init__(self, logger, config, analytics=None, api_client=None, topic_service=None):
        self.logger = logger
        self.config = config
        self.admins_file = 'admins.json'
        self.admins = self._load_admins()
        self.analytics = analytics
        self.api_client = api_client
        self.topic_service = topic_service
        self.start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        if not os.path.exists('bot_settings.json'):
            self._create_default_settings()

    def _create_default_settings(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_settings = {
            "auto_update_topics": True,
            "collect_statistics": True,
            "developer_mode": False,
            "private_mode": False,
            "log_level": "INFO",
            "max_messages_per_user": 100,
            "notification_enabled": True
        }
        
        try:
            with open('bot_settings.json', 'w', encoding='utf-8') as f:
                json.dump(default_settings, f, indent=4)
            self.logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def _load_admins(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if not hasattr(self, '_admin_cache'):
                self._admin_cache = None
                self._admin_cache_time = 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            current_time = time.time()
            if self._admin_cache and current_time - self._admin_cache_time < 300:
                return self._admin_cache

            if os.path.exists(self.admins_file):
                with open(self.admins_file, 'r', encoding='utf-8') as f:
                    admin_data = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    self._admin_cache = admin_data
                    self._admin_cache_time = current_time
                    return admin_data

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_data = {"admin_ids": [], "super_admin_ids": []}
            self._admin_cache = default_data
            self._admin_cache_time = current_time
            return default_data
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return {"admin_ids": [], "super_admin_ids": []}

    def save_admins(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"{self.admins_file}.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(self.admins, f, indent=4)

            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
            os.replace(temp_file, self.admins_file)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._admin_cache = self.admins.copy()
            self._admin_cache_time = time.time()
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return False

    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admins.get("admin_ids", []) or user_id in self.admins.get("super_admin_ids", [])

    def is_super_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admins.get("super_admin_ids", [])

    def add_admin(self, user_id, by_user_id=None, is_super=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if is_super:
                if user_id not in self.admins.get("super_admin_ids", []):
                    self.admins.setdefault("super_admin_ids", []).append(user_id)
                    self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {user_id}, –¥–æ–±–∞–≤–∏–ª: {by_user_id}")
            else:
                if user_id not in self.admins.get("admin_ids", []):
                    self.admins.setdefault("admin_ids", []).append(user_id)
                    self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: {user_id}, –¥–æ–±–∞–≤–∏–ª: {by_user_id}")

            return self.save_admins()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    def remove_admin(self, user_id, by_user_id=None):
        """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if user_id in self.admins.get("admin_ids", []):
                self.admins["admin_ids"].remove(user_id)
                self.logger.info(f"–£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω: {user_id}, —É–¥–∞–ª–∏–ª: {by_user_id}")
                return self.save_admins()
            elif user_id in self.admins.get("super_admin_ids", []):
                self.admins["super_admin_ids"].remove(user_id)
                self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {user_id}, —É–¥–∞–ª–∏–ª: {by_user_id}")
                return self.save_admins()
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    def handle_admin_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data='admin_manage')],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data='admin_logs')],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data='admin_restart')]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        if self.is_super_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data='admin_settings')])
            keyboard.append([InlineKeyboardButton("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data='admin_maintenance')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ TeleAdmin*\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    def handle_admin_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        user_id = query.from_user.id

        if not self.is_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤")
            return

        query.answer()
        action = query.data

        if action == 'admin_stats':
            self._show_stats(query, context)
        elif action == 'admin_manage':
            self._show_admin_management(query, context)
        elif action == 'admin_logs':
            self._show_logs(query, context)
        elif action == 'admin_restart':
            self._restart_bot(query, context)
        elif action == 'admin_restart_confirm':
            self._restart_bot_confirm(query, context)
        elif action == 'admin_settings' and self.is_super_admin(user_id):
            self._show_settings(query, context)
        elif action == 'admin_maintenance' and self.is_super_admin(user_id):
            self._show_maintenance(query, context)
        elif action == 'admin_back':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            self._back_to_admin_menu(query, context)
        elif action.startswith('admin_add_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            self._handle_add_admin(query, context, action)
        elif action.startswith('admin_remove_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            self._handle_remove_admin(query, context, action)
        elif action == 'admin_clear_cache':
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            self._clear_cache(query, context)
        elif action == 'admin_backup':
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._create_backup(query, context)
        elif action == 'admin_update_api':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API
            self._update_api_data(query, context)
        elif action == 'admin_clean_logs':
            # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            self._clean_logs(query, context)
        elif action.startswith('admin_toggle_'):
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self._toggle_setting(query, context, action.replace('admin_toggle_', ''))
        elif action == 'admin_system_info':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            self._show_system_info(query, context)
        elif action == 'admin_user_stats':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self._show_user_stats(query, context)

    def _show_stats(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_count = self._count_users()
            message_count = self._count_messages()
            uptime = self._get_uptime()
            bot_starts = self._count_bot_starts()
            topic_requests = self._count_topic_requests()
            completed_tests = self._count_completed_tests()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ç–µ–º–∞–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–µ–Ω
            popular_topics = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if self.topic_service:
                try:
                    topics = self.topic_service.get_popular_topics(5)
                    if topics:
                        popular_topics = "\n".join([f"{i+1}. {topic}" for i, topic in enumerate(topics)])
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º: {e}")
                    popular_topics = f"–û—à–∏–±–∫–∞: {str(e)}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
                f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n\n"
                f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n"
                f"üîÑ –ó–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞: {bot_starts}\n"
                f"üìù –ó–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–º: {topic_requests}\n"
                f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {completed_tests}\n\n"
                f"*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:*\n{popular_topics}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_user_stats')],
                [InlineKeyboardButton("üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", callback_data='admin_system_info')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )

    def _show_system_info(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            mem = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'username', 'memory_percent']):
                if 'python' in proc.info['name'].lower():
                    python_processes.append(proc)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
            python_processes.sort(key=lambda x: x.info['memory_percent'], reverse=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
            processes_info = ""
            for i, proc in enumerate(python_processes[:5], 1):
                try:
                    mem_usage = proc.memory_info().rss / (1024 * 1024)
                    processes_info += f"{i}. PID: {proc.info['pid']}, –ü–∞–º—è—Ç—å: {mem_usage:.2f} –ú–ë\n"
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    processes_info += f"{i}. –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            
            if not processes_info:
                processes_info = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
            system_text = (
                "üíª *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ*\n\n"
                f"*–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:*\n"
                f"–ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%\n\n"
                f"*–ü–∞–º—è—Ç—å:*\n"
                f"–í—Å–µ–≥–æ: {mem.total / (1024 * 1024 * 1024):.2f} –ì–ë\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {mem.used / (1024 * 1024 * 1024):.2f} –ì–ë ({mem.percent}%)\n"
                f"–°–≤–æ–±–æ–¥–Ω–æ: {mem.free / (1024 * 1024 * 1024):.2f} –ì–ë\n\n"
                f"*–î–∏—Å–∫:*\n"
                f"–í—Å–µ–≥–æ: {disk.total / (1024 * 1024 * 1024):.2f} –ì–ë\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {disk.used / (1024 * 1024 * 1024):.2f} –ì–ë ({disk.percent}%)\n"
                f"–°–≤–æ–±–æ–¥–Ω–æ: {disk.free / (1024 * 1024 * 1024):.2f} –ì–ë\n\n"
                f"*Python –ø—Ä–æ—Ü–µ—Å—Å—ã (—Ç–æ–ø 5):*\n{processes_info}"
            )
            
            keyboard = [[InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data='admin_stats')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                system_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data='admin_stats')]])
            )

    def _show_user_stats(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Analytics, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.analytics:
                try:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                    daily_users = self.analytics.get_active_users_by_day()
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
                    hourly_users = self.analytics.get_active_users_by_hour()
                    
                    # –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ—Å—Ç–∞—Ö
                    test_stats = self.analytics.get_test_completion_stats()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                    days_stats = "\n".join([f"{days[i]}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" for i, count in enumerate(daily_users)])
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∞—Å–æ–≤ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 —á–∞—Å–∞)
                    hours_grouped = [
                        sum(hourly_users[0:6]),  # 0-6
                        sum(hourly_users[6:12]),  # 6-12
                        sum(hourly_users[12:18]),  # 12-18
                        sum(hourly_users[18:24])   # 18-24
                    ]
                    hours_stats = (
                        f"00:00-06:00: {hours_grouped[0]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                        f"06:00-12:00: {hours_grouped[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                        f"12:00-18:00: {hours_grouped[2]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                        f"18:00-00:00: {hours_grouped[3]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    )
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
                    test_stats_text = (
                        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {test_stats.get('avg_score', 0):.1f}%\n"
                        f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {test_stats.get('completed_tests', 0)}\n"
                        f"–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {test_stats.get('abandoned_tests', 0)}"
                    )
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
                    days_stats = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    hours_stats = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    test_stats_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            else:
                days_stats = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                hours_stats = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                test_stats_text = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_text = (
                "üìà *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
                f"*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*\n{days_stats}\n\n"
                f"*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:*\n{hours_stats}\n\n"
                f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:*\n{test_stats_text}"
            )
            
            keyboard = [[InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data='admin_stats')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data='admin_stats')]])
            )

    def _show_admin_management(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        try:
            admins = self.admins.get("admin_ids", [])
            super_admins = self.admins.get("super_admin_ids", [])

            admin_text = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"

            # –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
            admin_text += "*–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
            if super_admins:
                for i, admin_id in enumerate(super_admins, 1):
                    admin_text += f"{i}. ID: {admin_id}\n"
            else:
                admin_text += "–ù–µ—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"

            # –°–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            admin_text += "\n*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
            if admins:
                for i, admin_id in enumerate(admins, 1):
                    admin_text += f"{i}. ID: {admin_id}\n"
            else:
                admin_text += "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_add_regular')],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞", callback_data='admin_add_super')],
                [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_remove_admin')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                admin_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )

    def _show_logs(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤"""
        try:
            log_content = self._get_last_logs(100)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            max_length = 4000
            log_parts = []

            current_part = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤*\n\n```"
            for log_line in log_content:
                if len(current_part) + len(log_line) + 4 > max_length:  # +4 –¥–ª—è —É—á–µ—Ç–∞ ```
                    current_part += "```"
                    log_parts.append(current_part)
                    current_part = "```\n" + log_line
                else:
                    current_part += log_line

            if current_part:
                current_part += "```"
                log_parts.append(current_part)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("üìâ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫", callback_data='admin_logs_errors')],
                [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data='admin_clean_logs')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
            query.edit_message_text(
                log_parts[0] if log_parts else "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for part in log_parts[1:]:
                context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=part,
                    parse_mode='Markdown'
                )

            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–æ–≥–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )

    def _restart_bot(self, query, context):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞)
        if not self.is_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            return

        query.edit_message_text(
            "üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? "
            "–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data='admin_restart_confirm'),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='admin_back')
                ]
            ]),
            parse_mode='Markdown'
        )

    def _restart_bot_confirm(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        user_id = query.from_user.id

        if not self.is_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            return

        try:
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            query.edit_message_text(
                "üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode='Markdown'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self.logger.warning(f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            restart_thread = threading.Thread(target=self._perform_restart)
            restart_thread.daemon = True
            restart_thread.start()
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )
            return False

    def _perform_restart(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            time.sleep(5)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è restart.sh —Å–∫—Ä–∏–ø—Ç–∞
            with open("bot.restart", "w") as f:
                f.write(f"Restart triggered at {datetime.datetime.now()}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å - —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–Ω—è—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞
            os.kill(os.getpid(), signal.SIGTERM)
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")

    def _show_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = self._get_bot_settings()

        settings_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.get('auto_update_topics', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.get('collect_statistics', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üîç –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.get('developer_mode', False) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.get('private_mode', False) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('notification_enabled', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {settings.get('log_level', 'INFO')}\n"
            f"üë§ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {settings.get('max_messages_per_user', 100)}"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º", callback_data='admin_toggle_auto_update')],
            [InlineKeyboardButton("üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data='admin_toggle_statistics')],
            [InlineKeyboardButton("üîç –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data='admin_toggle_dev_mode')],
            [InlineKeyboardButton("üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='admin_toggle_private_mode')],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='admin_toggle_notifications')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")

    def _toggle_setting(self, query, context, setting_key):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setting_map = {
            'auto_update': 'auto_update_topics',
            'statistics': 'collect_statistics',
            'dev_mode': 'developer_mode',
            'private_mode': 'private_mode',
            'notifications': 'notification_enabled'
        }
        
        setting_name = setting_map.get(setting_key)
        if not setting_name:
            query.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_key}")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self._get_bot_settings()
            
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_value = settings.get(setting_name, False)
            settings[setting_name] = not current_value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._save_bot_settings(settings)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            new_value = "–≤–∫–ª—é—á–µ–Ω–∞" if settings[setting_name] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            query.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} {new_value}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self._show_settings(query, context)
            
            self.logger.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {user_id} –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É {setting_name} –Ω–∞ {settings[setting_name]}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_key}: {e}")
            query.answer(f"–û—à–∏–±–∫–∞: {e}")

    def _show_maintenance(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        maintenance_text = (
            "üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data='admin_clear_cache')],
            [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='admin_backup')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API", callback_data='admin_update_api')],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data='admin_clean_logs')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            maintenance_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")

    def _clear_cache(self, query, context):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à API –∏ –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à API, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            api_cache_cleared = False
            if self.api_client and hasattr(self.api_client, 'clear_cache'):
                self.api_client.clear_cache()
                api_cache_cleared = True
                self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—á–∏—Å—Ç–∏–ª –∫—ç—à API")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–µ–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            topic_cache_cleared = False
            if self.topic_service and hasattr(self.topic_service, 'clear_cache'):
                self.topic_service.clear_cache()
                topic_cache_cleared = True
                self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—á–∏—Å—Ç–∏–ª –∫—ç—à —Ç–µ–º")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫—ç—à–∞ API
            api_cache_file = 'api_cache.json'
            if os.path.exists(api_cache_file):
                try:
                    os.remove(api_cache_file)
                    api_cache_file_removed = True
                    self.logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª –∫—ç—à–∞ API")
                except Exception as e:
                    api_cache_file_removed = False
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫—ç—à–∞ API: {e}")
            else:
                api_cache_file_removed = None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_text = "üóëÔ∏è *–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞*\n\n"
            
            if api_cache_cleared:
                result_text += "‚úÖ –ö—ç—à API —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω\n"
            else:
                result_text += "‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞\n"
                
            if topic_cache_cleared:
                result_text += "‚úÖ –ö—ç—à —Ç–µ–º —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω\n"
            else:
                result_text += "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ç–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞\n"
                
            if api_cache_file_removed is True:
                result_text += "‚úÖ –§–∞–π–ª –∫—ç—à–∞ API —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n"
            elif api_cache_file_removed is False:
                result_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫—ç—à–∞ API\n"
            elif api_cache_file_removed is None:
                result_text += "‚ÑπÔ∏è –§–∞–π–ª –∫—ç—à–∞ API –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )

    def _create_backup(self, query, context):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        try:
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            query.edit_message_text(
                "üíæ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏*\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...",
                parse_mode='Markdown'
            )
            
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            timestamp = int(time.time())
            backup_dir = "backups"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)
            
            # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            files_to_backup = [
                'user_states.json',
                'historical_events.json',
                'admins.json',
                'bot_settings.json',
                'api_cache.json'
            ]
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            backup_files = []
            for file_name in files_to_backup:
                if os.path.exists(file_name):
                    backup_file_name = f"{file_name.split('.')[0]}_backup_{timestamp}.json"
                    backup_path = os.path.join(backup_dir, backup_file_name)
                    try:
                        import shutil
                        shutil.copy2(file_name, backup_path)
                        backup_files.append((file_name, backup_path))
                        self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞ {file_name}")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            data_backup_path = os.path.join(backup_dir, f"data_backup_v{len(backup_files)}_{timestamp}")
            try:
                import zipfile
                with zipfile.ZipFile(data_backup_path + '.zip', 'w') as zipf:
                    for file_name in files_to_backup:
                        if os.path.exists(file_name):
                            zipf.write(file_name)
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤
                    log_files = self._get_log_files()
                    if log_files:
                        zipf.write(log_files[0])
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –æ–±—â–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_backup_path}.zip")
                backup_files.append(("–í—Å–µ –¥–∞–Ω–Ω—ã–µ", data_backup_path + '.zip'))
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_text = "üíæ *–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
            
            if backup_files:
                result_text += "–°–æ–∑–¥–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:\n\n"
                for original, backup in backup_files:
                    result_text += f"‚Ä¢ {original} ‚Üí {os.path.basename(backup)}\n"
            else:
                result_text += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )
            
            self.logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–æ–∑–¥–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )

    def _update_api_data(self, query, context):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ API (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        try:
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            query.edit_message_text(
                "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API*\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ API, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            api_updated = False
            if self.api_client and hasattr(self.api_client, 'refresh_data'):
                self.api_client.refresh_data()
                api_updated = True
                self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ API")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            topics_updated = False
            if self.topic_service and hasattr(self.topic_service, 'refresh_topics'):
                self.topic_service.refresh_topics()
                topics_updated = True
                self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ–±–Ω–æ–≤–∏–ª —Ç–µ–º—ã")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_text = "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*\n\n"
            
            if api_updated:
                result_text += "‚úÖ –î–∞–Ω–Ω—ã–µ API —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
            else:
                result_text += "‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
                
            if topics_updated:
                result_text += "‚úÖ –¢–µ–º—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
            else:
                result_text += "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ç–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö API: {e}")
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö API: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )

    def _clean_logs(self, query, context):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        try:
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
            query.edit_message_text(
                "üßπ *–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤*\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤...",
                parse_mode='Markdown'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
            log_files = self._get_log_files()
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
            import datetime
            current_date = datetime.datetime.now().date()
            files_to_delete = []
            current_log = None
            
            for log_file in log_files:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    file_name = os.path.basename(log_file)
                    if file_name == "bot.log":
                        current_log = log_file
                        continue
                    
                    if file_name.startswith("bot_log_") and len(file_name) > 12:
                        date_str = file_name[8:16]  # –§–æ—Ä–º–∞—Ç YYYYMMDD
                        file_date = datetime.datetime.strptime(date_str, "%Y%m%d").date()
                        
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                        if (current_date - file_date).days > 7:
                            files_to_delete.append(log_file)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ {log_file}: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
            deleted_count = 0
            for file_path in files_to_delete:
                try:
                    os.remove(file_path)
                    deleted_count += 1
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞ {file_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª–µ–µ 10 –ú–ë)
            current_log_truncated = False
            if current_log and os.path.exists(current_log):
                file_size = os.path.getsize(current_log)
                if file_size > 10 * 1024 * 1024:  # 10 –ú–ë
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
                        backup_path = f"{current_log}.bak"
                        import shutil
                        shutil.copy2(current_log, backup_path)
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
                        with open(current_log, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                        
                        with open(current_log, 'w', encoding='utf-8') as f:
                            f.writelines(lines[-1000:])
                            
                        current_log_truncated = True
                        self.logger.info(f"–¢–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª —É—Å–µ—á–µ–Ω (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_text = "üßπ *–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
            
            if deleted_count > 0:
                result_text += f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤\n"
            else:
                result_text += "‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n"
                
            if current_log_truncated:
                result_text += "‚úÖ –¢–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª –±—ã–ª —É—Å–µ—á–µ–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )
            
            self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_maintenance')]]),
                parse_mode='Markdown'
            )

    def _back_to_admin_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user_id = query.from_user.id

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data='admin_manage')],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data='admin_logs')],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data='admin_restart')]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        if self.is_super_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data='admin_settings')])
            keyboard.append([InlineKeyboardButton("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data='admin_maintenance')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ TeleAdmin*\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {query.from_user.first_name}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    def _handle_add_admin(self, query, context, action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤)
        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
        is_super = action == 'admin_add_super'
        admin_type = "—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_super else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        query.edit_message_text(
            f"‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {admin_type}*\n\n"
            f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ {admin_type}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ Telegram ID –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_back')]]),
            parse_mode='Markdown'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['waiting_for_admin_id'] = is_super

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ {admin_type}")

    def _handle_remove_admin(self, query, context, action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤)
        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        admins = self.admins.get("admin_ids", [])
        super_admins = self.admins.get("super_admin_ids", [])

        if not admins and not super_admins:
            query.edit_message_text(
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
        for admin_id in super_admins:
            if admin_id != user_id:  # –ù–µ –¥–∞–µ–º —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                keyboard.append([InlineKeyboardButton(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {admin_id}", callback_data=f'admin_delete_{admin_id}')])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in admins:
            keyboard.append([InlineKeyboardButton(f"–ê–¥–º–∏–Ω: {admin_id}", callback_data=f'admin_delete_{admin_id}')])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "üë• *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

    def _count_users(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Analytics
            if self.analytics and hasattr(self.analytics, 'get_unique_users_count'):
                return self.analytics.get_unique_users_count()
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —á—Ç–µ–Ω–∏–µ –∏–∑ user_states.json
            if os.path.exists('user_states.json'):
                with open('user_states.json', 'r', encoding='utf-8') as f:
                    user_states = json.load(f)
                    return len(user_states)
            
            return 0
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    def _count_messages(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Analytics
            if self.analytics and hasattr(self.analytics, 'get_total_messages_count'):
                return self.analytics.get_total_messages_count()
            
            # –ó–∞–≥–ª—É—à–∫–∞
            return 0
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0

    def _get_uptime(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            uptime_seconds = time.time() - self.start_time
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            days = int(uptime_seconds // 86400)
            hours = int((uptime_seconds % 86400) // 3600)
            minutes = int((uptime_seconds % 3600) // 60)
            
            if days > 0:
                return f"{days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω."
            elif hours > 0:
                return f"{hours} —á. {minutes} –º–∏–Ω."
            else:
                return f"{minutes} –º–∏–Ω."
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _count_bot_starts(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Analytics
            if self.analytics and hasattr(self.analytics, 'get_bot_starts_count'):
                return self.analytics.get_bot_starts_count(hours=24)
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —á—Ç–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–æ–≤
            log_content = self._get_last_logs(1000)
            count = 0
            current_time = time.time()
            
            for line in log_content:
                if " –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞" in line:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                        log_time_str = line.split(" - ")[0]
                        log_time = time.mktime(time.strptime(log_time_str, "%Y-%m-%d %H:%M:%S"))
                        
                        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                        if current_time - log_time < 86400:
                            count += 1
                    except Exception:
                        pass
            
            return count
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞: {e}")
            return 0

    def _count_topic_requests(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Analytics
            if self.analytics and hasattr(self.analytics, 'get_topic_requests_count'):
                return self.analytics.get_topic_requests_count(hours=24)
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —á—Ç–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–æ–≤
            log_content = self._get_last_logs(1000)
            count = 0
            current_time = time.time()
            
            for line in log_content:
                if " –≤—ã–±—Ä–∞–ª —Ç–µ–º—É: " in line or " –≤–≤–µ–ª —Å–≤–æ—é —Ç–µ–º—É: " in line:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                        log_time_str = line.split(" - ")[0]
                        log_time = time.mktime(time.strptime(log_time_str, "%Y-%m-%d %H:%M:%S"))
                        
                        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                        if current_time - log_time < 86400:
                            count += 1
                    except Exception:
                        pass
            
            return count
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–º: {e}")
            return 0

    def _count_completed_tests(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Analytics
            if self.analytics and hasattr(self.analytics, 'get_completed_tests_count'):
                return self.analytics.get_completed_tests_count(hours=24)
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —á—Ç–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–æ–≤
            log_content = self._get_last_logs(1000)
            count = 0
            current_time = time.time()
            
            for line in log_content:
                if " –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º " in line:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                        log_time_str = line.split(" - ")[0]
                        log_time = time.mktime(time.strptime(log_time_str, "%Y-%m-%d %H:%M:%S"))
                        
                        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                        if current_time - log_time < 86400:
                            count += 1
                    except Exception:
                        pass
            
            return count
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            return 0

    def _get_log_files(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        log_files = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
        log_dir = "logs"
        if os.path.exists(log_dir) and os.path.isdir(log_dir):
            for file_name in os.listdir(log_dir):
                if file_name.startswith("bot_log_") or file_name == "bot.log":
                    log_files.append(os.path.join(log_dir, file_name))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for file_name in os.listdir("."):
            if file_name.startswith("bot_log_") or file_name == "bot.log":
                log_files.append(file_name)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        log_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
        return log_files

    def _get_last_logs(self, lines=100):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        try:
            log_files = self._get_log_files()

            if not log_files:
                return ["–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]

            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
            latest_log = log_files[0]

            with open(latest_log, 'r', encoding='utf-8') as f:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ lines —Å—Ç—Ä–æ–∫
                return list(f)[-lines:]
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"]

    def _get_bot_settings(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            if os.path.exists('bot_settings.json'):
                with open('bot_settings.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    "auto_update_topics": True,
                    "collect_statistics": True,
                    "developer_mode": False,
                    "private_mode": False,
                    "notification_enabled": True,
                    "log_level": "INFO",
                    "max_messages_per_user": 100
                }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
            return {}

    def _save_bot_settings(self, settings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "bot_settings.json.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=4)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.replace(temp_file, "bot_settings.json")
            
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
            return False

    def process_new_admin_id(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
        if not self.is_super_admin(user_id):
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if 'waiting_for_admin_id' not in context.user_data:
            update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        is_super = context.user_data.get('waiting_for_admin_id')
        admin_type = "—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_super else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        del context.user_data['waiting_for_admin_id']

        # –ü–∞—Ä—Å–∏–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            new_admin_id = int(update.message.text.strip())
        except ValueError:
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω
        if new_admin_id in self.admins.get("admin_ids", []) or new_admin_id in self.admins.get("super_admin_ids", []):
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        success = self.add_admin(new_admin_id, by_user_id=user_id, is_super=is_super)

        if success:
            update.message.reply_text(
                f"‚úÖ {admin_type.capitalize()} —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )
            self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ {admin_type} —Å ID {new_admin_id}")
        else:
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {admin_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )

    def handle_delete_admin_callback(self, update, context, admin_id_to_delete):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ callback"""
        query = update.callback_query
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if int(admin_id_to_delete) == user_id:
            query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        success = self.remove_admin(int(admin_id_to_delete), by_user_id=user_id)

        if success:
            query.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            self.logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_delete}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            self._show_admin_management(query, context)
        else:
            query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_delete}")
