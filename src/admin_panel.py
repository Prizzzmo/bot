import os
import json
import logging
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext

class AdminPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –±–æ—Ç–∞"""

    def __init__(self, logger, config):
        self.logger = logger
        self.config = config
        self.admins_file = 'admins.json' # Added for clarity and consistency
        self.admins = self._load_admins()

    def _load_admins(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if not hasattr(self, '_admin_cache'):
                self._admin_cache = None
                self._admin_cache_time = 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            current_time = time.time()
            if self._admin_cache and current_time - self._admin_cache_time < 300:
                return self._admin_cache

            if os.path.exists(self.admins_file):
                with open(self.admins_file, 'r', encoding='utf-8') as f:
                    admin_data = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    self._admin_cache = admin_data
                    self._admin_cache_time = current_time
                    return admin_data

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_data = {"admin_ids": [], "super_admin_ids": []}
            self._admin_cache = default_data
            self._admin_cache_time = current_time
            return default_data
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return {"admin_ids": [], "super_admin_ids": []}

    def save_admins(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"{self.admins_file}.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(self.admins, f, indent=4)

            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
            os.replace(temp_file, self.admins_file)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._admin_cache = self.admins.copy()
            self._admin_cache_time = time.time()
            return True #Added return for consistency
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return False #Added return for consistency

    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admins.get("admin_ids", []) or user_id in self.admins.get("super_admin_ids", [])

    def is_super_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admins.get("super_admin_ids", [])

    def add_admin(self, user_id, by_user_id=None, is_super=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if is_super:
                if user_id not in self.admins.get("super_admin_ids", []):
                    self.admins.setdefault("super_admin_ids", []).append(user_id)
                    self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {user_id}, –¥–æ–±–∞–≤–∏–ª: {by_user_id}")
            else:
                if user_id not in self.admins.get("admin_ids", []):
                    self.admins.setdefault("admin_ids", []).append(user_id)
                    self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: {user_id}, –¥–æ–±–∞–≤–∏–ª: {by_user_id}")

            return self.save_admins()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    def remove_admin(self, user_id, by_user_id=None):
        """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if user_id in self.admins.get("admin_ids", []):
                self.admins["admin_ids"].remove(user_id)
                self.logger.info(f"–£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω: {user_id}, —É–¥–∞–ª–∏–ª: {by_user_id}")
                return self.save_admins()
            elif user_id in self.admins.get("super_admin_ids", []):
                self.admins["super_admin_ids"].remove(user_id)
                self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {user_id}, —É–¥–∞–ª–∏–ª: {by_user_id}")
                return self.save_admins()
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    def handle_admin_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data='admin_manage')],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data='admin_logs')],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data='admin_restart')]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        if self.is_super_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data='admin_settings')])
            keyboard.append([InlineKeyboardButton("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data='admin_maintenance')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ TeleAdmin*\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    def handle_admin_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        user_id = query.from_user.id

        if not self.is_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤")
            return

        query.answer()
        action = query.data

        if action == 'admin_stats':
            self._show_stats(query, context)
        elif action == 'admin_manage':
            self._show_admin_management(query, context)
        elif action == 'admin_logs':
            self._show_logs(query, context)
        elif action == 'admin_restart':
            self._restart_bot(query, context)
        elif action == 'admin_settings' and self.is_super_admin(user_id):
            self._show_settings(query, context)
        elif action == 'admin_maintenance' and self.is_super_admin(user_id):
            self._show_maintenance(query, context)
        elif action == 'admin_back':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            self._back_to_admin_menu(query, context)
        elif action.startswith('admin_add_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            self._handle_add_admin(query, context, action)
        elif action.startswith('admin_remove_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            self._handle_remove_admin(query, context, action)

    def _show_stats(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_count = self._count_users()
            message_count = self._count_messages()

            stats_text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
                f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self._get_uptime()}\n\n"
                f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n"
                f"üîÑ –ó–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞: {self._count_bot_starts()}\n"
                f"üìù –ó–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–º: {self._count_topic_requests()}\n"
                f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self._count_completed_tests()}\n"
            )

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )

    def _show_admin_management(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        try:
            admins = self.admins.get("admin_ids", [])
            super_admins = self.admins.get("super_admin_ids", [])

            admin_text = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"

            # –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
            admin_text += "*–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
            if super_admins:
                for i, admin_id in enumerate(super_admins, 1):
                    admin_text += f"{i}. ID: {admin_id}\n"
            else:
                admin_text += "–ù–µ—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"

            # –°–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            admin_text += "\n*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
            if admins:
                for i, admin_id in enumerate(admins, 1):
                    admin_text += f"{i}. ID: {admin_id}\n"
            else:
                admin_text += "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_add_regular')],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞", callback_data='admin_add_super')],
                [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_remove_admin')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                admin_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )

    def _show_logs(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤"""
        try:
            log_content = self._get_last_logs(100)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            max_length = 4000
            log_parts = []

            current_part = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤*\n\n```"
            for log_line in log_content:
                if len(current_part) + len(log_line) + 4 > max_length:  # +4 –¥–ª—è —É—á–µ—Ç–∞ ```
                    current_part += "```"
                    log_parts.append(current_part)
                    current_part = "```\n" + log_line
                else:
                    current_part += log_line

            if current_part:
                current_part += "```"
                log_parts.append(current_part)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            query.edit_message_text(
                log_parts[0] if log_parts else "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]]),
                parse_mode='Markdown'
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for part in log_parts[1:]:
                context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=part,
                    parse_mode='Markdown'
                )

            self.logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–æ–≥–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )

    def _restart_bot(self, query, context):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞)
        if not self.is_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            return

        query.edit_message_text(
            "üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? "
            "–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data='admin_restart_confirm'),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='admin_back')
                ]
            ]),
            parse_mode='Markdown'
        )

    def _show_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = self._get_bot_settings()

        settings_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º: {'–í–∫–ª—é—á–µ–Ω–æ' if settings.get('auto_update_topics', True) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {'–í–∫–ª—é—á–µ–Ω–æ' if settings.get('collect_statistics', True) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üîç –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {'–í–∫–ª—é—á–µ–Ω–æ' if settings.get('developer_mode', False) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {'–í–∫–ª—é—á–µ–Ω–æ' if settings.get('private_mode', False) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º", callback_data='admin_toggle_auto_update')],
            [InlineKeyboardButton("üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data='admin_toggle_statistics')],
            [InlineKeyboardButton("üîç –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data='admin_toggle_dev_mode')],
            [InlineKeyboardButton("üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='admin_toggle_private_mode')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")

    def _show_maintenance(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
        user_id = query.from_user.id

        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        maintenance_text = (
            "üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data='admin_clear_cache')],
            [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='admin_backup')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API", callback_data='admin_update_api')],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data='admin_clean_logs')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            maintenance_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")

    def _back_to_admin_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user_id = query.from_user.id

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data='admin_manage')],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data='admin_logs')],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data='admin_restart')]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        if self.is_super_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data='admin_settings')])
            keyboard.append([InlineKeyboardButton("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data='admin_maintenance')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ TeleAdmin*\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {query.from_user.first_name}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    def _handle_add_admin(self, query, context, action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤)
        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
        is_super = action == 'admin_add_super'
        admin_type = "—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_super else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        query.edit_message_text(
            f"‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {admin_type}*\n\n"
            f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ {admin_type}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ Telegram ID –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_back')]]),
            parse_mode='Markdown'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['waiting_for_admin_id'] = is_super

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ {admin_type}")

    def _handle_remove_admin(self, query, context, action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤)
        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        admins = self.admins.get("admin_ids", [])
        super_admins = self.admins.get("super_admin_ids", [])

        if not admins and not super_admins:
            query.edit_message_text(
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
        for admin_id in super_admins:
            if admin_id != user_id:  # –ù–µ –¥–∞–µ–º —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                keyboard.append([InlineKeyboardButton(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {admin_id}", callback_data=f'admin_delete_{admin_id}')])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in admins:
            keyboard.append([InlineKeyboardButton(f"–ê–¥–º–∏–Ω: {admin_id}", callback_data=f'admin_delete_{admin_id}')])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "üë• *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

    def _count_users(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return 42  # –ü—Ä–∏–º–µ—Ä
        except Exception:
            return 0

    def _count_messages(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return 1337  # –ü—Ä–∏–º–µ—Ä
        except Exception:
            return 0

    def _get_uptime(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            return "3 –¥–Ω—è 7 —á–∞—Å–æ–≤"  # –ü—Ä–∏–º–µ—Ä
        except Exception:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _count_bot_starts(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –∏–∑ –ª–æ–≥–æ–≤
            return 25  # –ü—Ä–∏–º–µ—Ä
        except Exception:
            return 0

    def _count_topic_requests(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –∏–∑ –ª–æ–≥–æ–≤
            return 73  # –ü—Ä–∏–º–µ—Ä
        except Exception:
            return 0

    def _count_completed_tests(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –∏–∑ –ª–æ–≥–æ–≤
            return 18  # –ü—Ä–∏–º–µ—Ä
        except Exception:
            return 0

    def _get_last_logs(self, lines=100):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        try:
            log_files = []
            log_dir = "logs"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤
            if os.path.exists(log_dir) and os.path.isdir(log_dir):
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
                files = os.listdir(log_dir)
                log_files = [os.path.join(log_dir, f) for f in files if f.startswith("bot_log_")]

            # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not log_files:
                files = [f for f in os.listdir() if f.startswith("bot_log_")]
                log_files = files

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
            log_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)

            if not log_files:
                return ["–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]

            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
            latest_log = log_files[0]

            with open(latest_log, 'r', encoding='utf-8') as f:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ lines —Å—Ç—Ä–æ–∫
                return list(f)[-lines:]
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"]

    def _get_bot_settings(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            if os.path.exists('bot_settings.json'):
                with open('bot_settings.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    "auto_update_topics": True,
                    "collect_statistics": True,
                    "developer_mode": False,
                    "private_mode": False
                }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
            return {}

    def process_new_admin_id(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
        if not self.is_super_admin(user_id):
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if 'waiting_for_admin_id' not in context.user_data:
            update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        is_super = context.user_data.get('waiting_for_admin_id')
        admin_type = "—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_super else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        del context.user_data['waiting_for_admin_id']

        # –ü–∞—Ä—Å–∏–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            new_admin_id = int(update.message.text.strip())
        except ValueError:
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω
        if new_admin_id in self.admins.get("admin_ids", []) or new_admin_id in self.admins.get("super_admin_ids", []):
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        success = self.add_admin(new_admin_id, by_user_id=user_id, is_super=is_super)

        if success:
            update.message.reply_text(
                f"‚úÖ {admin_type.capitalize()} —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )
            self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ {admin_type} —Å ID {new_admin_id}")
        else:
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {admin_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_back')]])
            )

    def handle_delete_admin_callback(self, update, context, admin_id_to_delete):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ callback"""
        query = update.callback_query
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not self.is_super_admin(user_id):
            query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if int(admin_id_to_delete) == user_id:
            query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        success = self.remove_admin(int(admin_id_to_delete), by_user_id=user_id)

        if success:
            query.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            self.logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_delete}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            self._show_admin_management(query, context)
        else:
            query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_delete}")