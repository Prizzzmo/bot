import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from src.topic_service import TopicService # Import the new TopicService
from src.base_service import BaseService

class UIManager(BaseService):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram"""

    def __init__(self, logger, topic_service: TopicService): # Inject TopicService
        super().__init__(logger)
        self.topic_service = topic_service

    def _do_initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç UI –º–µ–Ω–µ–¥–∂–µ—Ä

        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            return True
        except Exception as e:
            self._logger.log_error(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UIManager")
            return False

    def sanitize_markdown(self, text):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ Markdown –≤ Telegram.

        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in chars_to_escape:
            text = text.replace(char, '\\' + char)

        return text

    def main_menu(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        keyboard = [
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data='topic')],
            [InlineKeyboardButton("üß† –¢–µ—Å—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ", callback_data='test')],
            [InlineKeyboardButton("üó£Ô∏è –ë–µ—Å–µ–¥–∞ –æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏", callback_data='conversation')],
            [InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏", callback_data='history_map')],
            [InlineKeyboardButton("üìã –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='project_info')],
        ]
        return InlineKeyboardMarkup(keyboard)


    def create_topics_keyboard(self, topics):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.

        Args:
            topics (list): –°–ø–∏—Å–æ–∫ —Ç–µ–º

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        keyboard = []

        for i, topic in enumerate(topics, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            if topic and len(topic.strip()) > 0:
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if re.match(r'^\d+[\.\)\:]\s+', topic):
                    # –¢–µ–º–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –∫–∞–∫ –µ—Å—Ç—å
                    display_topic = topic
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ —Ç–µ–º–µ
                    display_topic = f"{i}. {topic}"

                # –û—á–∏—â–∞–µ–º —Ç–µ–º—É –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_topic = self.sanitize_markdown(display_topic)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–º—ã –≤ –∫–Ω–æ–ø–∫–µ
                display_topic = display_topic[:30] + '...' if len(display_topic) > 30 else display_topic
                keyboard.append([InlineKeyboardButton(display_topic, callback_data=f'topic_{i}')])
            else:
                # –ï—Å–ª–∏ —Ç–µ–º–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                keyboard.append([InlineKeyboardButton(f"{i}. [–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞]", callback_data=f'topic_{i}')])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ç–µ–º
        keyboard.append([
            InlineKeyboardButton("üìù –°–≤–æ—è —Ç–µ–º–∞", callback_data='custom_topic'),
            InlineKeyboardButton("üîÑ –ë–æ–ª—å—à–µ —Ç–µ–º", callback_data='more_topics')
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])

        return InlineKeyboardMarkup(keyboard)

# src/topic_service.py
import re

class TopicService:
    def parse_topics(self, topics_text):
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

        Args:
            topics_text (str): –¢–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ –æ—Ç API

        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
        """
        filtered_topics = []

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º
        pattern = r'(?:^\d+[.):]\s*|^[*‚Ä¢-]\s*|^[–∞-—è–ê-–Ø\w]+[:.]\s*)(.+?)$'

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        unique_topics_set = set()

        for line in topics_text.split('\n'):
            line = line.strip()
            if not line or len(line) <= 1:
                continue

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            match = re.search(pattern, line, re.MULTILINE)
            if match:
                topic_text = match.group(1).strip()
                if topic_text and topic_text not in unique_topics_set:
                    filtered_topics.append(topic_text)
                    unique_topics_set.add(topic_text)
            # –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            elif '.' in line or ':' in line:
                parts = line.split('.', 1) if '.' in line else line.split(':', 1)
                if len(parts) > 1:
                    topic_text = parts[1].strip()
                    if topic_text and topic_text not in unique_topics_set:
                        filtered_topics.append(topic_text)
                        unique_topics_set.add(topic_text)
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å —Ü–∏—Ñ—Ä—ã
            elif line[0].isdigit():
                i = 1
                while i < len(line) and (line[i].isdigit() or line[i] in ' \t.):'):
                    i += 1
                if i < len(line):
                    topic_text = line[i:].strip()
                    if topic_text and topic_text not in unique_topics_set:
                        filtered_topics.append(topic_text)
                        unique_topics_set.add(topic_text)
            else:
                if line not in unique_topics_set:
                    filtered_topics.append(line)
                    unique_topics_set.add(line)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Ç–µ–º
        return filtered_topics[:30]