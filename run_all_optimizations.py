"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import time
import json
import subprocess
import sys

try:
    import astor
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ü–∞–∫–µ—Ç astor –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "astor"])
    import astor

def print_progress(current, total, message="", width=50):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª—å"""
    progress = int(width * current / total)
    bar = "‚ñà" * progress + "‚ñë" * (width - progress)
    percent = 100 * current / total
    print(f"\r[{bar}] {percent:.1f}% {message}", end="")
    if current == total:
        print()

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–µ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print(f"\n{description}...")
    try:
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(f"  {output.strip()}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∫–æ–º–∞–Ω–¥–∞
        if process.returncode == 0:
            print(f"‚úÖ {description} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
        else:
            error = process.stderr.read()
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def optimize_project():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    start_time = time.time()

    print("üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞\n")

    # –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_steps = [
        {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            "command": [sys.executable, "optimize_project.py"],
            "description": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        },
        {
            "name": "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
            "command": [sys.executable, "clear_cache.py"],
            "description": "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
        },
        {
            "name": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞",
            "command": [sys.executable, "code_optimizer.py"],
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        },
        {
            "name": "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
            "command": [sys.executable, "split_large_functions.py"],
            "description": "–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–±–∏–µ–Ω–∏—é –±–æ–ª—å—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        }
    ]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    total_steps = len(optimization_steps)
    successful_steps = 0

    for i, step in enumerate(optimization_steps, 1):
        print(f"\n[{i}/{total_steps}] {step['name']}")
        success = run_command(step["command"], step["description"])
        if success:
            successful_steps += 1
        print_progress(i, total_steps, f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {i}/{total_steps}")

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    success_percent = 100 * successful_steps / total_steps

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    execution_time = time.time() - start_time
    minutes = int(execution_time // 60)
    seconds = int(execution_time % 60)

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"\n‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {successful_steps} –∏–∑ {total_steps} —à–∞–≥–æ–≤ ({success_percent:.1f}%)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if os.path.exists('optimization_report.json'):
        try:
            with open('optimization_report.json', 'r', encoding='utf-8') as f:
                report = json.load(f)

            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimizations_applied = report.get("optimizations_applied", [])
            if optimizations_applied:
                print(f"\nüìä –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(optimizations_applied)} –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
                for opt in optimizations_applied[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
                    opt_type = opt.get("type", "unknown")
                    print(f"  - {opt_type}")
                if len(optimizations_applied) > 5:
                    print(f"  - ... –∏ –µ—â–µ {len(optimizations_applied) - 5}")

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            code_recommendations = report.get("code_recommendations", [])
            if code_recommendations:
                remaining_recs = len(code_recommendations)
                print(f"\nüîç –û—Å—Ç–∞–ª–æ—Å—å {remaining_recs} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ä—É—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ split_large_functions.py –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        except:
            pass

    print("\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    optimize_project()