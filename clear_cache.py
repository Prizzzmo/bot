
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∫—ç—à–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
"""
import os
import json
import shutil

def clear_api_cache():
    """–û—á–∏—â–∞–µ—Ç API –∫—ç—à"""
    cache_files = ['api_cache.json', 'cache.json']
    
    for file in cache_files:
        if os.path.exists(file):
            try:
                os.remove(file)
                print(f"‚úÖ –§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cache_dirs = ['cache', '.cache']
    
    for directory in cache_dirs:
        if os.path.exists(directory) and os.path.isdir(directory):
            try:
                shutil.rmtree(directory)
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")

def clear_memory_cache():
    """–°–æ–∑–¥–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º –∫—ç—à–µ–º –≤ –ø–∞–º—è—Ç–∏"""
    empty_cache = {}
    
    try:
        with open('api_cache.json', 'w', encoding='utf-8') as f:
            json.dump(empty_cache, f)
        print("‚úÖ –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –æ—á–∏—â–µ–Ω (—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏: {e}")

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π"""
    backup_dir = 'backups'
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    import time
    timestamp = int(time.time())
    
    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    files_to_backup = [
        'api_cache.json', 
        'user_states.json', 
        'historical_events.json',
        'admins.json',
        'bot_settings.json'
    ]
    
    for file in files_to_backup:
        if os.path.exists(file):
            try:
                backup_path = f"{backup_dir}/{file.replace('.json', '')}_backup_{timestamp}.json"
                shutil.copy2(file, backup_path)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {file} -> {backup_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {file}: {e}")

if __name__ == "__main__":
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    create_backup()
    
    print("\nüîÑ –û—á–∏—Å—Ç–∫–∞ API –∫—ç—à–∞...")
    clear_api_cache()
    
    print("\nüîÑ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏...")
    clear_memory_cache()
    
    print("\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã.")
